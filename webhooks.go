package main

import (
	"database/sql"
	"encoding/json"
	"errors"
	"log"
	"net/http"

	"github.com/google/uuid"
	"github.com/jeronimoLa/http-server/internal/auth"
)

type AutoGenerated struct {
	Event string `json:"event"`
	Data  struct {
		UserID string `json:"user_id"`
	} `json:"data"`
}

func (cfg *apiConfig) handlerWebhooks(w http.ResponseWriter, r *http.Request) {
	ApiKey, err := auth.GetAPIKey(r.Header)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	if ApiKey != cfg.polkaKey {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}

	decoder := json.NewDecoder(r.Body)
	params := AutoGenerated{}
	err = decoder.Decode(&params)
	if err != nil {
		log.Println("couldnt decoded body")
	}

	if params.Event != "user.upgraded" {
		JSONErrorResponse(w, http.StatusNoContent, "", nil)
		return
	}
	userID, err := uuid.Parse(params.Data.UserID)
	if err != nil {
		log.Println(err)
	}
	_, errs := cfg.db.UpdateUserToChirpyRed(r.Context(), userID)
	if errs != nil {
		if errors.Is(errs, sql.ErrNoRows) {
			w.WriteHeader(http.StatusNotFound)
			return
		}
		log.Println(errs)
	}
	respondWithJSON(w, http.StatusNoContent, nil)
}
