// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_token.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addRefreshToken = `-- name: AddRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, email, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    $2,
    $3,
    $4,
    $5,
    NULL    
)
RETURNING token, created_at, updated_at, email, user_id, expires_at, revoked_at
`

type AddRefreshTokenParams struct {
	Token     string
	UpdatedAt time.Time
	Email     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) AddRefreshToken(ctx context.Context, arg AddRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, addRefreshToken,
		arg.Token,
		arg.UpdatedAt,
		arg.Email,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshTokenByEmail = `-- name: GetRefreshTokenByEmail :one
SELECT token, created_at, updated_at, email, user_id, expires_at, revoked_at FROM refresh_tokens 
where email = $1 AND revoked_at is NULL
`

func (q *Queries) GetRefreshTokenByEmail(ctx context.Context, email string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByEmail, email)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT user_id, revoked_at FROM refresh_tokens 
where token = $1
`

type GetUserByRefreshTokenRow struct {
	UserID    uuid.UUID
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserByRefreshToken(ctx context.Context, token string) (GetUserByRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, token)
	var i GetUserByRefreshTokenRow
	err := row.Scan(&i.UserID, &i.RevokedAt)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET updated_at = $1, revoked_at = $2
WHERE token = $3
`

type RevokeTokenParams struct {
	UpdatedAt time.Time
	RevokedAt sql.NullTime
	Token     string
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.UpdatedAt, arg.RevokedAt, arg.Token)
	return err
}
